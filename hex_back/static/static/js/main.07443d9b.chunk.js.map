{"version":3,"sources":["RawBack.js","Components/Hexagon.js","Components/Board.js","NewGame.js","App.js","serviceWorker.js","index.js"],"names":["RawBack","useState","backResp","setBackResp","useEffect","fetch","process","REACT_APP_RASPBERRY","method","then","result","text","Hexagon","props","className","player","onClick","canPlay","handleClickBrd","idxX","idxY","Board","idX","idY","game","playerID","setCanPlay","id","body","JSON","stringify","x","y","res","json","setGame","finally","getPlayeur2Line","board","row","forEach","element","index","push","key","boardWidth","length","style","color","width","marginLeft","paddingLeft","map","valX","indexX","valY","indexY","undefined","open","winner","closeOnDocumentClick","NewGame","init","setInit","setPlayerId","toogleTimer","setToogleTimer","gameId","setGameId","boardSize","setBoardSize","updateGame","timer","setTimeout","a","clearTimeout","handleClickJoinGame","trigger","modal","type","min","max","onChange","event","target","value","name","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07443d9b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function RawBack() {\r\n  const [backResp, setBackResp] = useState(\"blop\");\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `${process.env.REACT_APP_RASPBERRY || \"\"}/`,\r\n      {\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then(result => result.text())\r\n      .then(result => {\r\n        return setBackResp(result);\r\n      })\r\n  }, []);\r\n  return <div> <b> {backResp} </b> </div>\r\n}","import React from 'react';\r\nimport './Hexagon.css';\r\n\r\nexport default function Hexagon(props) {\r\n\r\n    let handleClickHexagon = () => {\r\n        if (!props.player && props.canPlay) {\r\n            props.handleClickBrd(props.idxX, props.idxY);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`hexagon player${props.player}`} onClick={() => { handleClickHexagon() }} />\r\n    );\r\n\r\n}","import React from 'react';\r\nimport Hexagon from './Hexagon';\r\nimport Popup from \"reactjs-popup\";\r\nimport './Board.css';\r\n\r\nexport default function Board(props) {\r\n\r\n    let handleClickBrd = (idX, idY) => {\r\n        if (props.game.player === props.playerID) {\r\n            props.setCanPlay(false);\r\n            fetch(`${process.env.REACT_APP_RASPBERRY || \"\"}/hex/play/${props.game.id}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ player: props.game.player, x: idX, y: idY })\r\n            })\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    props.setGame(result);\r\n                })\r\n                .finally(() => props.setCanPlay(true))\r\n        }\r\n    }\r\n\r\n    let getPlayeur2Line = (board) => {\r\n        let row = [];\r\n        board[0].forEach((element, index) => {\r\n            row.push(<Hexagon\r\n                key={index}\r\n                player={2} />)\r\n        });\r\n        return row;\r\n    }\r\n\r\n    let boardWidth = 76 * (props.game.board.length + (props.game.board.length - 1) / 2 + 2);\r\n\r\n    return (\r\n        <div>\r\n            C'est au tour du <span style={{ color: (props.game.player === 1) ? \"lawngreen\" : \"red\" }}> joueur {props.game.player} </span>\r\n            <div className={\"board\"} style={{ width: boardWidth, marginLeft: `calc(calc(100% - ${boardWidth}px)/2)` }}>\r\n                <div className={\"row\"} style={{ paddingLeft: 38 }}>\r\n                    {getPlayeur2Line(props.game.board)}\r\n                </div>\r\n                {\r\n                    props.game.board.map((valX, indexX) => {\r\n                        return <div key={indexX}\r\n                            className={\"row\"}\r\n                            style={{ paddingLeft: 38 * indexX }}>\r\n                            <Hexagon player={1} />\r\n                            {valX.map((valY, indexY) => <Hexagon\r\n                                key={indexY}\r\n                                idxX={indexX}\r\n                                idxY={indexY}\r\n                                handleClickBrd={handleClickBrd}\r\n                                canPlay={props.canPlay}\r\n                                player={valY ? valY.player : undefined} />\r\n                            )}\r\n                            <Hexagon player={1} />\r\n                        </div>\r\n                    })\r\n                }\r\n                <div className={\"row\"} style={{ paddingLeft: 38 * (props.game.board.length + 2) }}>\r\n                    {getPlayeur2Line(props.game.board)}\r\n                </div>\r\n            </div>\r\n            <Popup\r\n                open={props.game.winner != null}\r\n                closeOnDocumentClick>\r\n                <div >\r\n                    <span style={{ color: (props.game.winner === 1) ? \"lawngreen\" : \"red\" }}> <b>Joueur {props.game.winner} a gagn√© </b></span>\r\n                </div>\r\n            </Popup>\r\n        </ div>\r\n    );\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Board from './Components/Board'\r\nimport Popup from \"reactjs-popup\";\r\n\r\nexport default function NewGame() {\r\n  const [game, setGame] = useState(null);\r\n  const [init, setInit] = useState(false);\r\n  const [playerID, setPlayerId] = useState(null);\r\n  const [canPlay, setCanPlay] = useState(false);\r\n  const [toogleTimer, setToogleTimer] = useState(false);\r\n  const [gameId, setGameId] = useState(null);\r\n  const [boardSize, setBoardSize] = useState(null);\r\n\r\n  let handleClickNewGame = () => fetch(\r\n    `${process.env.REACT_APP_RASPBERRY || \"\"}/hex/new/${boardSize}`,\r\n    {\r\n      method: \"GET\",\r\n    })\r\n    .then(res => res.json())\r\n    .then(result => {\r\n      setGame(result);\r\n      setPlayerId(result.player);\r\n      setInit(true);\r\n      setCanPlay(true);\r\n      setGameId(result.id);\r\n    }\r\n    );\r\n\r\n  let updateGame = () => fetch(\r\n    `${process.env.REACT_APP_RASPBERRY || \"\"}/hex/get/${gameId}`,\r\n    {\r\n      method: \"GET\",\r\n    })\r\n    .then(res => res.json())\r\n    .then(result => {\r\n      setGame(result);\r\n    }\r\n    );\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(async () => {\r\n      try {\r\n        if (init && (!game.winner)) {\r\n          await updateGame();\r\n        }\r\n      }\r\n      finally {\r\n        setToogleTimer(!toogleTimer);\r\n      }\r\n    }, 1000);\r\n    return () => { clearTimeout(timer); };\r\n  }, [toogleTimer]);\r\n\r\n  let handleClickJoinGame = async () => {\r\n    try {\r\n      await updateGame();\r\n      setInit(true); setCanPlay(true);\r\n    }\r\n    catch (err) {\r\n    }\r\n  };\r\n\r\n  if (!init) {\r\n    return (\r\n      <div>\r\n        <Popup\r\n          trigger={<button className=\"button\"> Nouveau jeu</button>}\r\n          modal\r\n          closeOnDocumentClick>\r\n          <div className=\"modal\">\r\n            <div>\r\n              <label>Taille du jeu : </label>\r\n              <input type=\"number\" id=\"boardId\" min=\"1\" max=\"15\" onChange={event => setBoardSize(event.target.value)} />\r\n            </div>\r\n            <button onClick={() => { handleClickNewGame() }}>Nouveau</button >\r\n          </div>\r\n        </Popup>\r\n        <Popup\r\n          trigger={<button className=\"button\"> Rejoindre un jeu </button>}\r\n          modal\r\n          closeOnDocumentClick>\r\n          <div className=\"modal\">\r\n            <div>\r\n              <label>Partie : </label>\r\n              <input type=\"number\" id=\"boardId\" min=\"0\" max=\"9\" onChange={event => setGameId(event.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Joueur : </label>\r\n              <input type=\"radio\" id=\"1\" name=\"playeur\" checked={playerID === 1} onChange={() => setPlayerId(1)} />\r\n              <label>1</label>\r\n              <input type=\"radio\" id=\"2\" name=\"playeur\" checked={playerID === 2} onChange={() => setPlayerId(2)} />\r\n              <label>2</label>\r\n            </div>\r\n            <button onClick={() => { handleClickJoinGame() }}>Rejoindre</button >\r\n          </div>\r\n        </Popup>\r\n      </div>)\r\n  }\r\n\r\n  if (game === null) {\r\n    return <div> \"Empty game\" </div>\r\n  }\r\n\r\n  return (<div>\r\n    Tu es le <b>joueur {playerID} </b> et tu joues √† la partie <b>n¬∞ {game.id} </b>\r\n    < Board game={game} setGame={setGame} playerID={playerID} setCanPlay={setCanPlay} canPlay={canPlay} />\r\n  </div>)\r\n}","import React from 'react';\r\nimport RawBack from './RawBack'\r\nimport NewGame from './NewGame'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <RawBack />\r\n      <NewGame />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}